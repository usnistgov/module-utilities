[build-system]
build-backend = "hatchling.build"
requires = [
    "hatch-fancy-pypi-readme",
    "hatch-vcs",
    "hatchling",
]

[project]
name = "module-utilities"
description = "Collection of utilities to aid working with python modules."
keywords = [
    "module-utilities",
]
license = "NIST-PD"
license-files = [ "LICENSE" ]
authors = [
    { name = "William P. Krekelberg", email = "wpk@nist.gov" },
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
    "version",
]
dependencies = [
    "typing-extensions; python_version<'3.11'",
]
optional-dependencies.all = [
    "module-utilities[inherit]",
]
optional-dependencies.inherit = [
    "docstring-inheritance",
]
urls.Documentation = "https://pages.nist.gov/module-utilities/"
urls.Homepage = "https://github.com/usnistgov/module-utilities"

[dependency-groups]
dev = [
    { include-group = "dev-extras" },
    { include-group = "mypy" },
    { include-group = "nbval" },
    { include-group = "test" },
    { include-group = "typing" },
    { include-group = "uvxrun" },
]
test = [
    { include-group = "test-extras" },
]
docs = [
    "autodocsumm",
    "myst-nb; python_version>='3.9'",
    "pyenchant",
    "sphinx>=5.3.0",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
    { include-group = "optional" },
]
cog = [ "cogapp" ]
dev-extras = [
    "ipykernel",
    "ipython",
    "nbclient>=0.10.0",
    "nox>=2024.4.15",
    "pytest-accept",
]
docs-live = [
    "sphinx-autobuild",
    { include-group = "docs" },
]
mypy = [ "mypy>=1.14.0" ]
nbval = [ "nbval" ]
optional = [ "module-utilities[all]" ]
test-extras = [
    { include-group = "optional" },
    { include-group = "test-noopt" },
]
test-noopt = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
test-notebook = [
    { include-group = "nbval" },
    { include-group = "test" },
]
typing = [
    "pylint",
    "pytest",
    { include-group = "optional" },
    { include-group = "uvxrun" },
]
# Anything needed to run tools/uvxrun.py
# NOTE: uvxrun-tools defined explicitly in tool.pyproject2conda.envs.uvxrun-tools
uvxrun = [ "packaging" ]

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build.targets.sdist]
exclude = [
    "dist-conda",
    "module-utilities-feedstock",
    "tmp",
    ".*_cache",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    { path = "README.md" },
    { path = "CHANGELOG.md" },
    { path = "LICENSE" },
]

[tool.check-wheel-contents]
toplevel = [ "module_utilities" ]
src_dir = [ "src" ]

[tool.pyproject-fmt]
# max_supported_python = "3.13"

# * Testing --------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = [
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--pyargs",
    "--cov-config=pyproject.toml",
]
testpaths = [
    "README.md",
    "module_utilities",
    "tests",
]
markers = [
    "inherit: docstring_inheritance dependent code",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
]
omit = [
    "*/vendored/*",
    "*/_typing.py",
]
include = [
    "src/*",
]

[tool.coverage.paths]
source = [
    "src/",
    ".nox/**/site-packages/",
]

# * Typing ---------------------------------------------------------------------

[tool.mypy]
files = [
    "src/**/*.py",
    "tests/**/*.py",
]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    ".eggs",
    ".tox",
    ".nox",
    ".venv",
    ".numba_cache",
    "docs",
]
check_untyped_defs = true
strict = true

# [[tool.mypy.overrides]]
# ignore_missing_imports = true
# module = [  ]

[[tool.mypy.overrides]]
ignore_errors = true
module = [
    "module_utilities.vendored.docscrape",
]

[tool.pyright]
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
    ".tox/**",
    ".nox/**",
    "envs/**",
    "**/.mypy_cache",
    "**/.numba_cache",
    "src/module_utilities/vendored",
]
pythonVersion = "3.11"
strict = [
    "src",
    "noxfile.py",
    "tools",
]
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.pytype]
inputs = [
    "src",
    "tests",
]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
python = "default"
channels = "conda-forge"
style = "yaml"
deps = "pip"

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }

[tool.pyproject2conda.envs.dev]
groups = "dev"

[tool.pyproject2conda.envs.test]
groups = "test"
python = "all"

[tool.pyproject2conda.envs.test-extras]
groups = "test-extras"
python = "all"
skip_package = true

[tool.pyproject2conda.envs.uvxrun-tools]
reqs = [
    # these used solely for specking tools to be used with tools/uvxrun.py
    "conda-lock>=2.5.5",
    "grayskull>=2.5.3",
    "nbqa>=1.8.4",
    "pre-commit",
    "pyright>=1.1.392",
    "scriv",
    "twine>=5.0.0",
]
groups = "mypy"
skip_package = true
style = "requirements"

# * uv -------------------------------------------------------------------------

[tool.uv]
managed = true
default-groups = [ "dev" ]
fork-strategy = "requires-python"
required-version = ">=0.5.21"

[tool.uv.pip]
annotation-style = "line"

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]
